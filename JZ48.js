/**
 * 一位加法：异或
 * 1 ^ 1 = 0
 * 1 ^ 0 = 1
 * 0 ^ 1 = 1
 * 0 ^ 0 = 0
 * 进位问题：与
 * 1 & 1 = 1
 * 1 & 0 = 0
 * 0 & 1 = 0
 * 0 & 0 = 0
 * 在位运算中，我们用“<<”表示向左移动一位，也就是“进位”。
 * 所以，进位可以表示为：
 * (x & y) << 1
 */
/**
 *
 * 时间复杂度：O(1) // 最高执行32次，number的长度有限制
 * 空间复杂度：O(1)
 */
function Add (num1, num2) {
  while (num2) {
    let temp = num1 ^ num2
    num2 = (num1 & num2) << 1
    num1 = temp
  }
  return num1
}